import React, {
  useCallback,
  useEffect,
  useReducer,
  useState,
  useRef,
  useMemo,
} from "react";
import {
  ResizablePanelGroup,
  ResizablePanel,
  ResizableHandle,
} from "@/components/ui/resizable";
import { motion } from "framer-motion";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Skeleton } from "@/components/ui/skeleton";
import {
  BookOpen,
  MessageCircle,
  Loader2,
  BrainCog,
  Scan,
  TestTube2,
  Code,
  GalleryVerticalEnd,
  Pencil,
} from "lucide-react";
import { useTranslation } from "react-i18next";
import { Input } from "@/components/ui/input";
import {
  getWorkSpace,
  getWorkSpaceChatHistory,
  sendWorkspaceChatMessage,
  generateWorkspaceAutoContext,
  getWorkspaceContexts,
} from "@/utils/_apis/learnPlayground-api";
import { useParams } from "react-router-dom";
import FlashCards from "../../../lib/flashcards/FlashCards";
import Tooltip from "@mui/material/Tooltip";
import ChatInput, {
  Context as ChatContext,
  Model as ChatModel,
} from "@/lib/chat/chatInput";
import ChatMessages from "@/lib/chat/ChatMessage";
import { initialState } from "@/lib/consts";
import MindMap from "@/lib/explantion/DeepExplnation";
import PdfReader from "@/lib/PdfReader";
import { QuizList } from "@/lib/quizzes/Quiz";
import { SummaryList } from "@/lib/summary/Summary";
import {
  ChatMessage,
  TabKey,
  Workspace,
  WorkspaceContext,
  WorkspaceContextInput,
} from "@/lib/types";
import YouTubeReader from "@/lib/YoutubeReader";
import { ChatSkeleton, ContentSkeleton, reducer, TabsSkeleton } from "../utils";
import { toast } from "sonner";

const TABS_CONFIG = [
  { id: "chat", labelKey: "tabs.chat", icon: MessageCircle },
  { id: "flashcards", labelKey: "tabs.flashcards", icon: GalleryVerticalEnd },
  { id: "quizzes", labelKey: "tabs.quizzes", icon: TestTube2 },
  { id: "summary", labelKey: "tabs.summary", icon: BookOpen },
  { id: "deepExplanation", labelKey: "tabs.deepExplanation", icon: BrainCog },
  { id: "code", labelKey: "tabs.code", icon: Code },
  { id: "note", labelKey: "tabs.notes", icon: Pencil },
] as const;

const LearnPlayground: React.FC = () => {
  const { t, i18n } = useTranslation();
  const { id } = useParams();
  const [state, dispatch] = useReducer(reducer, initialState);
  const [workspaceLoading, setWorkspaceLoading] = useState(true);
  const [contentLoading, setContentLoading] = useState(false);
  const [workspace, setWorkspace] = useState<Workspace | undefined>();
  const [fullScreen, setFullScreen] = useState(false);
  const [workspaceContexts, setWorkspaceContexts] = useState<
    WorkspaceContext[]
  >([]);
  const [selectedContexts, setSelectedContexts] = useState<ChatContext[]>([]);
  const [autoContextLoading, setAutoContextLoading] = useState(false);

  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const tabsListRef = useRef<HTMLDivElement>(null);
  const [canScrollLeft, setCanScrollLeft] = useState(false);
  const [, setCanScrollRight] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [scrollLeft, setScrollLeft] = useState(0);
  const isRTL = i18n.language === "ar";

  const autoContextCount = useMemo(() => {
    if (!workspaceContexts.length) return 0;
    const autoGenerated = workspaceContexts.filter(
      (ctx) => ctx.isAutoGenerated
    );
    return autoGenerated.length > 0
      ? autoGenerated.length
      : workspaceContexts.length;
  }, [workspaceContexts]);

  const mapContextType = useCallback((type?: string): ChatContext["type"] => {
    switch (type) {
      case "video":
        return "video";
      case "transcript":
        return "transcript";
      case "document":
        return "document";
      case "summary":
      case "ai_generated":
        return "summary";
      case "note":
      case "text":
        return "text";
      default:
        return "text";
    }
  }, []);

  const mapWorkspaceContextsToChat = useCallback(
    (contexts: WorkspaceContext[] = []): ChatContext[] =>
      contexts.map((context) => {
        const content = context.content ?? "";
        return {
          id: context.id,
          name: context.title,
          content,
          type: mapContextType(context.type),
          preview: content.length > 160 ? `${content.slice(0, 160)}â€¦` : content,
          metadata: {
            ...context.metadata,
            source: context.source,
            isAutoGenerated: context.isAutoGenerated,
            workspaceContextId: context.id,
          },
        };
      }),
    [mapContextType]
  );

  const mapChatContextsToPayload = useCallback(
    (contexts: ChatContext[]): WorkspaceContextInput[] =>
      contexts
        .filter((ctx) => !(ctx.metadata?.fileId || ctx.file))
        .map((ctx) => ({
          id: ctx.id,
          title: ctx.name,
          content: ctx.content,
          type: ctx.type,
          source: ctx.metadata?.source,
          metadata: ctx.metadata,
        })),
    []
  );

  const availableContexts = useMemo(
    () => mapWorkspaceContextsToChat(workspaceContexts),
    [mapWorkspaceContextsToChat, workspaceContexts]
  );

  useEffect(() => {
    if (!availableContexts.length) {
      setSelectedContexts([]);
      return;
    }

    setSelectedContexts(availableContexts);
  }, [availableContexts]);

  const extractVideoId = useCallback((url: string): string | null => {
    if (url.includes("youtu.be/")) {
      return url.split("/").pop()?.split("?")[0] || null;
    }
    return url.split("v=")[1]?.split("&")[0] || null;
  }, []);

  const fetchWorkspace = useCallback(async () => {
    if (!id) {
      setWorkspaceLoading(false);
      return;
    }

    try {
      setWorkspaceLoading(true);
      setContentLoading(true);

      const [response, history] = await Promise.all([
        getWorkSpace(id),
        getWorkSpaceChatHistory(id),
      ]);

      const workspaceData = response.workspace;
      workspaceData.chatMessages = history;

      let contextsList = (workspaceData.contexts as WorkspaceContext[]) ?? [];

      if (!contextsList.length) {
        try {
          contextsList = await getWorkspaceContexts(id);
        } catch (contextError) {
          console.error("Failed to load workspace contexts:", contextError);
        }
      }

      workspaceData.contexts = contextsList;
      setWorkspaceContexts(contextsList);

      dispatch({ type: "SET_WORKSPACE", workspace: workspaceData });
      setWorkspace(workspaceData);

      const url = workspaceData.video?.url;
      if (url) {
        dispatch({ type: "SET_WORKSPACE_TYPE", workspaceType: "video" });
        dispatch({ type: "SET_SRC", src: url });

        const videoId = extractVideoId(url);
        if (videoId) {
          dispatch({ type: "SET_YOUTUBE_VIDEO", videoId });
        }
        if (workspaceData.video.transcript) {
          dispatch({
            type: "SET_TRANSCRIPT",
            transcript: workspaceData.video.transcript,
          });
        }
      }

      if (workspaceData.type === "document") {
        dispatch({ type: "SET_WORKSPACE_TYPE", workspaceType: "document" });
        dispatch({ type: "SET_SRC", src: workspaceData.document.url });
      }
    } catch (error) {
      console.error("Failed to fetch workspace:", error);
      dispatch({
        type: "SET_STATUS",
        status: { kind: "error", message: "Failed to load workspace" },
      });
    } finally {
      setWorkspaceLoading(false);
      setTimeout(() => setContentLoading(false), 1000);
    }
  }, [id]);

  useEffect(() => {
    fetchWorkspace();
  }, [fetchWorkspace]);

  const handleAutoContext = useCallback(async () => {
    if (!id) return;
    try {
      setAutoContextLoading(true);
      const contexts = await generateWorkspaceAutoContext(id, true);
      setWorkspaceContexts(contexts);
      setWorkspace((prev) =>
        prev ? { ...prev, contexts: contexts ?? [] } : prev
      );
      setSelectedContexts(mapWorkspaceContextsToChat(contexts));

      if (contexts.length > 0) {
        toast.success(
          t(
            "chat.auto_context_success",
            "Workspace context updated successfully."
          )
        );
      } else {
        toast.info(
          t(
            "chat.auto_context_empty",
            "No context was generated for this workspace yet."
          )
        );
      }
    } catch (error) {
      console.error("Failed to generate auto context:", error);
      toast.error(
        t(
          "chat.auto_context_failed",
          "Unable to generate context for this workspace."
        )
      );
    } finally {
      setAutoContextLoading(false);
    }
  }, [id, mapWorkspaceContextsToChat, t]);

  const handleSendMessage = useCallback(
    async (
      message: string,
      model?: ChatModel,
      contextsOverride?: ChatContext[]
    ) => {
      if (!message.trim() || !id) return;

      const contextsToSend =
        contextsOverride && contextsOverride.length
          ? contextsOverride
          : selectedContexts;

      const attachmentContexts = contextsToSend.filter(
        (ctx) => ctx.metadata?.fileId && ctx.file instanceof File
      );

      const attachmentFiles = attachmentContexts
        .map((ctx) => ctx.file)
        .filter((file): file is File => file instanceof File);

      const userAttachmentMetadata = attachmentContexts.map((ctx) => ({
        id: ctx.metadata?.fileId ?? ctx.id ?? `upload-${Date.now()}`,
        filename: ctx.name,
        mimetype: ctx.file?.type,
        size: ctx.file?.size,
        type: ctx.type === "image" ? "image" : "text",
        status: "uploading",
      }));

      const contextPayload = mapChatContextsToPayload(contextsToSend);
      const hasAttachments = attachmentFiles.length > 0;

      const userMessage: ChatMessage = {
        id: Date.now().toString(),
        type: "user",
        role: "user",
        content: message.trim(),
        timestamp: new Date(),
        metadata:
          userAttachmentMetadata.length > 0
            ? { attachments: userAttachmentMetadata }
            : undefined,
      };

      dispatch({ type: "ADD_CHAT_MESSAGE", message: userMessage });
      dispatch({ type: "SET_CHAT_LOADING", loading: true });
      dispatch({ type: "SET_STREAMING_MESSAGE", content: "" });

      try {
        await sendWorkspaceChatMessage(
          id,
          message.trim(),
          i18n.language as "en" | "ar",
          {
            model: model?.id,
            contexts: contextPayload,
            autoContext: contextPayload.length > 0 || hasAttachments,
            attachments: attachmentFiles,
          },
          (chunk) => {
            if (Array.isArray(chunk.metadata?.attachments)) {
              const uploadedAttachments = chunk.metadata.attachments.map(
                (attachment: any) => ({
                  ...attachment,
                  status: "uploaded",
                })
              );
              dispatch({
                type: "UPDATE_MESSAGE_ATTACHMENTS",
                messageId: userMessage.id,
                attachments: uploadedAttachments,
              });
            }
            if (chunk.chunk) {
              dispatch({ type: "ADD_STREAMING_CHUNK", chunk: chunk.chunk });
            }
            if (chunk.isComplete) {
              dispatch({
                type: "COMPLETE_STREAMING_MESSAGE",
                content: chunk.chunk || "",
                metadata: chunk.metadata,
              });
            }
            if (chunk.metadata?.error) {
              const errorMessage: ChatMessage = {
                id: Date.now().toString(),
                type: "assistant",
                content: chunk.metadata.error,
                timestamp: new Date(),
                metadata: { error: chunk.metadata.error },
              };
              dispatch({ type: "ADD_CHAT_MESSAGE", message: errorMessage });
              dispatch({ type: "SET_CHAT_LOADING", loading: false });
              dispatch({ type: "SET_STREAMING_MESSAGE", content: "" });
            }
          }
        );
      } catch (error) {
        console.error("Failed to send message:", error);
        if (userAttachmentMetadata.length > 0) {
          const failedAttachments = userAttachmentMetadata.map((attachment) => ({
            ...attachment,
            status: "failed",
          }));
          dispatch({
            type: "UPDATE_MESSAGE_ATTACHMENTS",
            messageId: userMessage.id,
            attachments: failedAttachments,
          });
        }
        const errorMessage: ChatMessage = {
          id: Date.now().toString(),
          type: "assistant",
          role: "assistant",
          content: t(
            "chat.error_occurred",
            "An error occurred while sending your message."
          ),
          timestamp: new Date(),
          metadata: { error: "Network error" },
        };
        dispatch({ type: "ADD_CHAT_MESSAGE", message: errorMessage });
        dispatch({ type: "SET_CHAT_LOADING", loading: false });
        dispatch({ type: "SET_STREAMING_MESSAGE", content: "" });
      }
    },
    [id, i18n.language, mapChatContextsToPayload, selectedContexts, t]
  );

  const handleQuickSend = useCallback(
    (message: string) =>
      handleSendMessage(message, undefined, selectedContexts),
    [handleSendMessage, selectedContexts]
  );

  const checkScrollability = useCallback(() => {
    if (scrollContainerRef.current) {
      const { scrollLeft, scrollWidth, clientWidth } =
        scrollContainerRef.current;
      setCanScrollLeft(scrollLeft > 5);
      setCanScrollRight(scrollLeft < scrollWidth - clientWidth - 5);
    }
  }, []);

  const [isResizing, setIsResizing] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  useEffect(() => {
    checkScrollability();
    const container = scrollContainerRef.current;
    if (!container) return;

    const handleScroll = () => checkScrollability();
    const handleResize = () => checkScrollability();

    container.addEventListener("scroll", handleScroll);
    window.addEventListener("resize", handleResize);

    return () => {
      container.removeEventListener("scroll", handleScroll);
      window.removeEventListener("resize", handleResize);
    };
  }, [checkScrollability]);

  const handleDragStart = useCallback((clientX: number) => {
    if (!scrollContainerRef.current) return;
    setIsDragging(true);
    setStartX(clientX - scrollContainerRef.current.offsetLeft);
    setScrollLeft(scrollContainerRef.current.scrollLeft);
  }, []);

  const handleDragMove = useCallback(
    (clientX: number) => {
      if (!isDragging || !scrollContainerRef.current) return;
      const x = clientX - scrollContainerRef.current.offsetLeft;
      const walk = (x - startX) * 2;
      scrollContainerRef.current.scrollLeft = scrollLeft - walk;
    },
    [isDragging, startX, scrollLeft]
  );

  const handleDragEnd = useCallback(() => {
    setIsDragging(false);
  }, []);

  const handleMouseDown = (e: React.MouseEvent) => handleDragStart(e.pageX);
  const handleMouseMove = (e: React.MouseEvent) => {
    if (isDragging) e.preventDefault();
    handleDragMove(e.pageX);
  };
  const handleTouchStart = (e: React.TouchEvent) =>
    handleDragStart(e.touches[0].pageX);
  const handleTouchMove = (e: React.TouchEvent) =>
    handleDragMove(e.touches[0].pageX);

  const getDisplayTitle = useCallback(() => {
    return (
      state.workspace?.workspaceName ||
      state.workspace?.title ||
      state.title ||
      "Untitled Workspace"
    );
  }, [state.workspace, state.title]);

  const renderContent = () => {
    if (contentLoading) {
      return <ContentSkeleton />;
    }

    if (state.type === "document") {
      return (
        <PdfReader
          src={state.src || ""}
          page={state.page}
          zoom={state.zoom}
          status={state.status}
          selectedText={state.selectedText || ""}
          onLoaded={(pageCount) => {
            dispatch({ type: "SET_PAGE_COUNT", pageCount });
            dispatch({ type: "SET_STATUS", status: { kind: "idle" } });
            setContentLoading(false);
          }}
          onError={(message) => {
            dispatch({
              type: "SET_STATUS",
              status: { kind: "error", message },
            });
            setContentLoading(false);
          }}
          onNext={() => dispatch({ type: "NEXT_PAGE" })}
          onPrev={() => dispatch({ type: "PREV_PAGE" })}
          onGoto={(p) => dispatch({ type: "SET_PAGE", page: p })}
          onZoomIn={() => dispatch({ type: "ZOOM_IN" })}
          onZoomOut={() => dispatch({ type: "ZOOM_OUT" })}
          onResetZoom={() => dispatch({ type: "RESET_ZOOM" })}
          onTextSelect={(text) => dispatch({ type: "SET_SELECTED_TEXT", text })}
          onAddToChat={(text) => dispatch({ type: "ADD_TO_CHAT", text })}
          pageCount={state.pageCount}
        />
      );
    }

    if (state.type === "video") {
      return (
        <YouTubeReader
          videoId={state.youtubeVideoId || ""}
          transcript={state.workspace?.video?.transcript?.data as any}
          onVideoSelect={(videoId) =>
            dispatch({ type: "SET_YOUTUBE_VIDEO", videoId })
          }
          onTimeUpdate={(currentTime, duration) =>
            dispatch({ type: "SET_YOUTUBE_TIME", currentTime, duration })
          }
          onPlay={() =>
            dispatch({ type: "SET_YOUTUBE_PLAYING", isPlaying: true })
          }
          onPause={() =>
            dispatch({ type: "SET_YOUTUBE_PLAYING", isPlaying: false })
          }
          onReady={() => setContentLoading(false)}
          onTranscriptLoad={(transcript) =>
            dispatch({ type: "SET_TRANSCRIPT", transcript })
          }
          className="w-full h-full flex-grow"
        />
      );
    }

    return null;
  };

  if (workspaceLoading) {
    return (
      <section
        style={{
          maxHeight: "calc(100vh - 3rem)",
          minHeight: "calc(100vh - 3rem)",
        }}
        dir={isRTL ? "rtl" : "ltr"}
        className="flex items-center justify-center"
      >
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-zinc-600 dark:text-zinc-400" />
          <p className="text-sm text-zinc-600 dark:text-zinc-300">
            {t("loading.workspace", "Loading workspace...")}
          </p>
        </div>
      </section>
    );
  }

  return (
    <section
      style={{ height: "calc(100vh)" }}
      dir={isRTL ? "rtl" : "ltr"}
      className="flex flex-col"
    >
      <div className="p-2 pb-0 pl-12 flex items-center justify-between flex-shrink-0">
        <div className="max-w-[34rem] flex-grow relative">
          {workspaceLoading ? (
            <Skeleton className="h-10 w-full rounded-2xl" />
          ) : (
            <Input
              className="rounded-2xl shadow-none border-none text-zinc-900 dark:text-zinc-100 w-full"
              value={getDisplayTitle()}
              readOnly
            />
          )}
          {contentLoading && (
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
              <Loader2 className="h-4 w-4 animate-spin text-zinc-400 dark:text-zinc-500" />
            </div>
          )}
        </div>
      </div>

      <ResizablePanelGroup
        key={fullScreen ? "pg-full" : "pg-split"}
        direction="horizontal"
        dir="ltr"
        className="flex-1 min-h-0"
        autoSaveId={fullScreen ? "fs-layout" : "split-layout"}
      >
        {fullScreen ? (
          <ResizablePanel
            defaultSize={100}
            minSize={0}
            className="mt-2 min-h-0 flex flex-col"
          >
            <motion.div
              initial={{ x: 20, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              transition={{ type: "spring", stiffness: 260, damping: 30 }}
              className="h-full flex flex-col min-h-0 px-6 mx-4"
            >
              {workspaceLoading ? (
                <TabsSkeleton />
              ) : (
                <Tabs
                  value={state.tab}
                  onValueChange={(v) =>
                    dispatch({ type: "SET_TAB", tab: v as TabKey })
                  }
                  className="h-full flex flex-col min-h-0"
                >
                  <div className="relative pb-4 flex-shrink-0">
                    {canScrollLeft && (
                      <div
                        className={`absolute ${
                          isRTL ? "right-0" : "left-0"
                        } top-0 bottom-4 w-8 z-20 pointer-events-none`}
                        style={{
                          background: `linear-gradient(to ${
                            isRTL ? "left" : "right"
                          }, rgba(255,255,255,0.8) 0%, transparent 100%)`,
                          backdropFilter: "blur(1px)",
                        }}
                      />
                    )}

                    <div
                      ref={scrollContainerRef}
                      className="overflow-x-auto scrollbar-hide flex w-full items-center gap-3 justify-center relative touch-pan-x"
                      onMouseDown={handleMouseDown}
                      onMouseMove={handleMouseMove}
                      onMouseUp={handleDragEnd}
                      onMouseLeave={handleDragEnd}
                      onTouchStart={handleTouchStart}
                      onTouchMove={handleTouchMove}
                      onTouchEnd={handleDragEnd}
                      style={{
                        cursor: isDragging ? "grabbing" : "grab",
                        WebkitOverflowScrolling: "touch",
                      }}
                    >
                      <TabsList
                        ref={tabsListRef}
                        className="relative !space-x-0 !p-1.5 flex items-center gap-2 h-12 min-w-max rounded-2xl border border-zinc-200/60 dark:border-zinc-800/60 bg-white/90 dark:bg-zinc-900/50 shadow-sm dark:shadow-zinc-950/20 backdrop-blur-md w-fit"
                        style={{ direction: isRTL ? "rtl" : "ltr" }}
                      >
                        {TABS_CONFIG.map((tab) => {
                          const IconComponent = tab.icon;
                          const isActive = state.tab === tab.id;
                          return (
                            <TabsTrigger
                              key={tab.id}
                              value={tab.id}
                              className={`px-4 py-2 relative z-20 flex-shrink-0 transition-all duration-200 
                        hover:bg-zinc-50 dark:hover:bg-zinc-800/40 
                        data-[state=active]:bg-zinc-100 dark:data-[state=active]:bg-zinc-800/60 
                        rounded-xl h-9 flex flex-row items-center 
                        justify-center select-none cursor-pointer gap-2`}
                              style={{
                                minWidth: "fit-content",
                              }}
                            >
                              {isActive ? (
                                <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full flex-shrink-0" />
                              ) : (
                                <IconComponent className="size-4 flex-shrink-0 text-zinc-600 dark:text-zinc-400" />
                              )}
                              <span
                                className={`text-sm font-medium transition-colors duration-200 whitespace-nowrap ${
                                  isActive
                                    ? "text-zinc-900 dark:text-zinc-100"
                                    : "text-zinc-700 dark:text-zinc-300"
                                }`}
                              >
                                {t(tab.labelKey as any)}
                              </span>
                            </TabsTrigger>
                          );
                        })}
                      </TabsList>

                      <Tooltip
                        title={t(
                          "workspace.exitFullScreen",
                          "Exit Full Screen"
                        )}
                        className="cursor-pointer"
                      >
                        <div className="p-2 rounded-xl hover:bg-zinc-100 dark:hover:bg-zinc-800/60 transition-colors duration-200">
                          <Scan
                            className="text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors duration-200 size-5"
                            onClick={() => {
                              setFullScreen(!fullScreen);
                            }}
                          />
                        </div>
                      </Tooltip>
                    </div>
                  </div>

                  <div className="flex-1 overflow-hidden flex flex-col min-h-0">
                    {state.tab === "chat" && (
                      <TabsContent
                        value="chat"
                        className="m-0 flex-1 relative items-end justify-end min-h-0 overflow-hidden"
                        style={{ maxHeight: "100%" }}
                      >
                        {state.isLoading ? (
                          <div className="w-full flex-1">
                            <ChatSkeleton />
                          </div>
                        ) : (
                          <>
                            <div className="w-full flex-1 flex flex-col justify-end items-center overflow-y-auto min-h-0">
                              <ChatMessages
                                messages={state.chatMessages || []}
                                isLoading={state.chatLoading}
                                streamingMessage={state.streamingMessage}
                                onSendMessage={handleQuickSend}
                              />
                            </div>
                            <ChatInput
                              className="flex-shrink-0 p-2 px-20 pb-2"
                              value={state.prompt}
                              hasAutoContext={true}
                              expandSection={true}
                              contexts={selectedContexts}
                              availableContexts={availableContexts}
                              autoContextCount={autoContextCount}
                              autoContextLoading={autoContextLoading}
                              onChange={(value: string) =>
                                dispatch({ type: "SET_PROMPT", prompt: value })
                              }
                              onSubmit={(value, model, contexts) =>
                                handleSendMessage(value, model, contexts)
                              }
                              onContextsChange={setSelectedContexts}
                              onAutoContextClick={handleAutoContext}
                              placeholder={t(
                                "chat.placeholder",
                                `Ask anything about ${getDisplayTitle()}...`
                              )}
                            />
                          </>
                        )}
                      </TabsContent>
                    )}

                    {state.tab === "flashcards" && workspace && (
                      <TabsContent
                        value="flashcards"
                        className="m-0 h-full"
                        style={{ maxHeight: "100%" }}
                      >
                        <FlashCards workspaceId={workspace.id} />
                      </TabsContent>
                    )}

                    {state.tab === "quizzes" && workspace && (
                      <TabsContent
                        value="quizzes"
                        className="m-0 h-full p-4 text-zinc-500 dark:text-zinc-400"
                      >
                        <QuizList
                          workspaceId={(workspace && workspace.id) || ""}
                        />
                      </TabsContent>
                    )}

                    {state.tab === "summary" && workspace?.id && (
                      <TabsContent
                        value="summary"
                        className="m-0 h-full p-4 text-zinc-500 dark:text-zinc-400"
                        style={{ maxHeight: "100%" }}
                      >
                        <SummaryList workspaceId={String(workspace.id)} />
                      </TabsContent>
                    )}

                    {state.tab === "deepExplanation" && (
                      <TabsContent
                        value="deepExplanation"
                        className="m-0 h-full p-4 text-zinc-500 dark:text-zinc-400 flex flex-col"
                        style={{ maxHeight: "100%" }}
                      >
                        <MindMap
                          workspaceId={(workspace && workspace.id) || ""}
                        />
                      </TabsContent>
                    )}
                  </div>
                </Tabs>
              )}
            </motion.div>
          </ResizablePanel>
        ) : (
          <>
            <ResizablePanel
              defaultSize={50}
              minSize={30}
              className="mt-2 min-h-0 flex flex-col"
            >
              <motion.div
                initial={{ x: 20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ type: "spring", stiffness: 260, damping: 30 }}
                className="h-full p-2  pt-0 flex flex-col min-h-0"
              >
                {renderContent()}
              </motion.div>
            </ResizablePanel>

            <ResizableHandle
              onPointerDown={() => setIsResizing(true)}
              onPointerUp={() => setIsResizing(false)}
              onPointerCancel={() => setIsResizing(false)}
              onMouseEnter={() => setIsHovered(true)}
              onMouseLeave={() => setIsHovered(false)}
              className="hover:bg-zinc-300 dark:hover:bg-zinc-700 transition-colors duration-200"
              style={{
                opacity: isResizing || isHovered ? 1 : 0,
                transition: "opacity 0.3s ease",
                cursor: "col-resize",
                pointerEvents: "auto",
              }}
            />

            <ResizablePanel
              defaultSize={50}
              minSize={30}
              className="mt-2 min-h-0 flex flex-col"
            >
              <motion.div
                initial={{ x: 20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ type: "spring", stiffness: 260, damping: 30 }}
                className="h-full flex flex-col min-h-0"
              >
                {workspaceLoading ? (
                  <TabsSkeleton />
                ) : (
                  <Tabs
                    value={state.tab}
                    onValueChange={(v) =>
                      dispatch({ type: "SET_TAB", tab: v as TabKey })
                    }
                    className="h-full flex flex-col min-h-0"
                  >
                    <div className="relative p-2 pt-0 flex-shrink-0">
                      {canScrollLeft && (
                        <div
                          className={`absolute ${
                            isRTL ? "right-2 sm:right-4" : "left-2 sm:left-4"
                          } top-2 sm:top-4 bottom-2 sm:bottom-4 w-4 sm:w-8 z-20 pointer-events-none`}
                          style={{
                            background: `linear-gradient(to ${
                              isRTL ? "left" : "right"
                            }, rgba(255,255,255,0.8), transparent)`,
                            backdropFilter: "blur(1px)",
                          }}
                        />
                      )}

                      <div
                        ref={scrollContainerRef}
                        className="overflow-x-auto scrollbar-hide flex w-full items-center gap-2 justify-center relative touch-pan-x"
                        onMouseDown={handleMouseDown}
                        onMouseMove={handleMouseMove}
                        onMouseUp={handleDragEnd}
                        onMouseLeave={handleDragEnd}
                        onTouchStart={handleTouchStart}
                        onTouchMove={handleTouchMove}
                        onTouchEnd={handleDragEnd}
                        style={{
                          cursor: isDragging ? "grabbing" : "grab",
                          WebkitOverflowScrolling: "touch",
                        }}
                      >
                        <TabsList
                          ref={tabsListRef}
                          className="relative !space-x-0 !p-1 flex items-center gap-4 h-11 min-w-max rounded-2xl border border-zinc-200/60 dark:border-zinc-800/60 bg-white/80 dark:bg-zinc-950/40 shadow-sm dark:shadow-none backdrop-blur-sm w-fit"
                          style={{ direction: isRTL ? "rtl" : "ltr" }}
                        >
                          {TABS_CONFIG.map((tab) => {
                            const IconComponent = tab.icon;
                            const isActive = state.tab === tab.id;
                            return (
                              <TabsTrigger
                                key={tab.id}
                                value={tab.id}
                                className={`px-2 sm:px-3 py-1.5 sm:py-2 relative z-20 flex-shrink-0 transition-all duration-150 
                          hover:bg-transparent data-[state=active]:bg-zinc-100 dark:data-[state=active]:bg-zinc-800/60 rounded-xl h-7 sm:h-9 flex flex-row items-center 
                          justify-center select-none cursor-pointer gap-1.5`}
                                style={{
                                  minWidth: "fit-content",
                                  padding: "0 8px",
                                  margin: "0 1px",
                                }}
                              >
                                {isActive ? (
                                  <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full flex-shrink-0" />
                                ) : (
                                  <IconComponent className="size-4 flex-shrink-0 text-zinc-600 dark:text-zinc-400" />
                                )}
                                <span
                                  className={`text-xs font-normal sm:text-sm transition-colors duration-150 whitespace-nowrap ${
                                    isActive
                                      ? "text-zinc-900 dark:text-zinc-100"
                                      : "text-zinc-700 dark:text-zinc-300"
                                  }`}
                                >
                                  {t(tab.labelKey as any)}
                                </span>
                              </TabsTrigger>
                            );
                          })}
                        </TabsList>

                        <Tooltip
                          title={t("workspace.fullScreen", "Full Screen")}
                          className="cursor-pointer"
                        >
                          <Scan
                            className="text-zinc-500 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 transition-all ease-linear duration-200 size-5"
                            onClick={() => {
                              setFullScreen(!fullScreen);
                            }}
                          />
                        </Tooltip>
                      </div>
                    </div>

                    <div className="flex-1 overflow-hidden flex flex-col min-h-0">
                      {state.tab === "chat" && (
                        <TabsContent
                          value="chat"
                          className="m-0 flex-1 flex flex-col relative items-end justify-end min-h-0"
                          style={{ maxHeight: "100%" }}
                        >
                          {state.isLoading ? (
                            <div className="w-full flex-1">
                              <ChatSkeleton />
                            </div>
                          ) : (
                            <>
                              <div className="w-full  flex-1 flex flex-col justify-end items-center overflow-y-auto min-h-0">
                                <ChatMessages
                                  messages={state.chatMessages || []}
                                  isLoading={state.chatLoading}
                                  streamingMessage={state.streamingMessage}
                                  onSendMessage={handleQuickSend}
                                />
                              </div>
                              <ChatInput
                                className="flex-shrink-0 p-2 px-20 pb-2"
                                value={state.prompt}
                                hasAutoContext={true}
                                expandSection={true}
                                contexts={selectedContexts}
                                availableContexts={availableContexts}
                                autoContextCount={autoContextCount}
                                autoContextLoading={autoContextLoading}
                                onChange={(value: string) =>
                                  dispatch({
                                    type: "SET_PROMPT",
                                    prompt: value,
                                  })
                                }
                                onSubmit={(value, model, contexts) =>
                                  handleSendMessage(value, model, contexts)
                                }
                                onContextsChange={setSelectedContexts}
                                onAutoContextClick={handleAutoContext}
                                placeholder={t(
                                  "chat.placeholder",
                                  `Ask anything about ${getDisplayTitle()}...`
                                )}
                                optionsToHide={{
                                  models: true,
                                }}
                              />
                            </>
                          )}
                        </TabsContent>
                      )}

                      {state.tab === "flashcards" && workspace && (
                        <TabsContent
                          value="flashcards"
                          className="m-0 h-full flex flex-col"
                          style={{ maxHeight: "100%" }}
                        >
                          <FlashCards workspaceId={workspace.id} />
                        </TabsContent>
                      )}

                      {state.tab === "quizzes" && (
                        <TabsContent
                          value="quizzes"
                          className="m-0 h-full p-4 text-zinc-500 dark:text-zinc-400 flex flex-col"
                        >
                          <QuizList
                            workspaceId={(workspace && workspace.id) || ""}
                          />
                        </TabsContent>
                      )}

                      {state.tab === "summary" && (
                        <TabsContent
                          value="summary"
                          className="m-0 h-full p-4 text-zinc-500 dark:text-zinc-400 flex flex-col"
                          style={{ maxHeight: "100%" }}
                        >
                          <SummaryList
                            workspaceId={
                              String(workspace && workspace.id) || ""
                            }
                          />
                        </TabsContent>
                      )}

                      {state.tab === "deepExplanation" && (
                        <TabsContent
                          value="deepExplanation"
                          className="m-0 h-full p-4 text-zinc-500 dark:text-zinc-400 flex flex-col"
                          style={{ maxHeight: "100%" }}
                        >
                          <MindMap
                            workspaceId={(workspace && workspace.id) || ""}
                          />
                        </TabsContent>
                      )}
                    </div>
                  </Tabs>
                )}
              </motion.div>
            </ResizablePanel>
          </>
        )}
      </ResizablePanelGroup>
    </section>
  );
};

export default LearnPlayground;
